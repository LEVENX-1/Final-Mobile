var express = require('express');
var app = express();
const bcrypt = require('bcrypt');
var mysql = require('mysql');
const util = require('util');
require('dotenv').config();
const cors = require('cors');
const { log } = require('console');

// üõ† ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ middleware
app.use(express.json());  // ‡πÉ‡∏ä‡πâ express.json() ‡πÅ‡∏ó‡∏ô body-parser
app.use(cors());  // ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô CORS ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏∑‡πà‡∏ô

// üì¶ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MySQL
var dbConn = mysql.createConnection({
    host: process.env.DB_HOST,
    user: process.env.DB_USER,
    password: process.env.DB_PASS,
    database: process.env.DB_NAME,
});

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
dbConn.connect(function (err) {
    if (err) {
        console.error('Error connecting to database:', err.stack);
        return;
    }
    console.log('Connected to database as id ' + dbConn.threadId);
});

const query = util.promisify(dbConn.query).bind(dbConn); // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô query ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô async/await ‡πÑ‡∏î‡πâ‡∏™‡∏∞‡∏î‡∏ß‡∏Å

// ‚¨áÔ∏è ‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÑ‡∏î‡πâ
module.exports = app;
app.use(express.json());

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// üìö GET: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
app.get('/AllOrder', async function (req, res) {
    try {
        const results = await query('SELECT * FROM customer_order');
        res.send(results);
    } catch (error) {
        console.error(error);
        res.status(500).send({ message: 'Database query failed', error });
    }
});


// üìö GET: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ name, size, number, topping ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å id ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
app.get('/OneOrder', async function (req, res) {
    log(req.query);
    try {
        const { id } = req.query;
        
        if (!id) {
            return res.status(400).send({ message: 'ID is required' });
        }

        // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ id
        const queryStr = 'SELECT * FROM customer_order WHERE id = ? ';
        const results = await query(queryStr, [id]);

        // Log ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        // console.log('Order data retrieved:', results.length > 0 ? results[0] : 'No matching order found');

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
        res.send(results.length > 0 ? results[0] : { message: 'No matching order found' });
    } catch (error) {
        console.error(error);
        res.status(500).send({ message: 'Database query failed', error });
    }
});


// üìå API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ ID ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á Database
app.post('/InsertOrder', function (req, res) {
    const { name, size, number, topping, sweetness, price } = req.body;
    console.log(req.body); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    if (!name || !size || !number || !topping || !sweetness || !price) {
        return res.status(400).send({ message: 'Missing required fields' });
    }

    if (isNaN(number) || number <= 0) {
        return res.status(400).send({ message: 'Number must be a positive integer' });
    }

    if (isNaN(price) || price <= 0) {
        return res.status(400).send({ message: 'Price must be a positive number' });
    }

    // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const insertQuery = 'INSERT INTO customer_order (name, size, number, topping, sweetness, price) VALUES (?, ?, ?, ?, ?, ?)';
    
    dbConn.query(insertQuery, [name, size, number, topping, sweetness, price], function (error, results) {
        if (error) {
            console.error(error);
            return res.status(500).send({ message: 'Database query failed', error });
        }

        // ‡∏î‡∏∂‡∏á ID ‡∏Ç‡∏≠‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°
        const insertedId = results.insertId;

        res.status(201).send({
            message: 'Order inserted successfully',
            id: insertedId // ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ ID ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ Client
        });
    });
});

// ///////////////////////////////////////////// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå ///////////////////////////////////////////////
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

// ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ (Error Handling)
app.use((err, req, res, next) => {
    console.error(err);
    res.status(500).send({ message: 'Something went wrong!' });
});
